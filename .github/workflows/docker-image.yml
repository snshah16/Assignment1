name: Build and Push Docker Images

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

     # Step 2: Set up AWS credentials for ECR login
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  # Include session token
          aws-region: us-east-1
          
    # Step 3: Login to Amazon ECR using AWS CLI
      - name: Login to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}  # Include session token
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 064686496891.dkr.ecr.us-east-1.amazonaws.com

      - name: Build and Push MySQL Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd database
          docker build -t my-mysql-image .
          docker tag my-mysql-image:latest $ECR_REGISTRY/my-mysql-image:latest
          docker push $ECR_REGISTRY/my-mysql-image:latest

      # Step 4: Build and Push Application Docker Image
      - name: Build and Push Application Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd ../app
          docker build -t my-app-image .
          docker tag my-app-image:latest $ECR_REGISTRY/my-app-image:latest
          docker push $ECR_REGISTRY/my-app-image:latest
